1、说明列表的浅拷贝和深拷贝的区别
浅拷贝包括：
对列表切片拷贝L[:]
调用对象的拷贝方法：list.copy()
调用copy.copy()
深拷贝包括：
调用copy.deepcopy()
浅拷贝：没有拷贝子对象，原始数据改变，子对象改变。
深拷贝：包含对象里面的自对象的拷贝，原始对象的改变不会造成深拷贝里任何子元素的改变。

2. 说明列表和元组的相同点和不同点
元组tuple与列表List相同点:
(1)元组tuple与列表List都是序列类型的对象
(2)可以存放任何类型的数据
(3)支持切片、迭代等操作
(4)可以通过索引访问
元组tuple与列表List不同点：
(1)语法差异，使用方括号[]创建列表，而使用括号()创建元组。
(2)不可变与可变：tuple是不可变类型，大小固定，而 list 是可变类型、数据可以动态变化。
(3)同样大小的数据，tuple 占用的内存空间更少
(4)同构与异构：tuple 用于存储异构(heterogeneous)数据，当做没有字段名的记录来用，比如用 tuple 来记录一个人的身高、体重、年龄。
而列表一般用于存储同构数据(homogenous)，同构数据就是具有相同意义的数据

3. 请写出字符串支持的所有方法及说明（例如: lower 返回字符串的小写）
st.count()          统计元素个数
st.capitalize()     首字母大写
st.format()         赋值，可以自动选定{}
st.index()          列出子字符串的索引
st.casefold()		转换字符串中所有大写字符为小写
st.center()			返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。默认填充字符为空格
st.encode()			以 encoding 指定的编码格式编码字符串
st.endswith()		用于判断字符串是否以指定后缀结尾，如果以指定后缀结尾返回True，否则返回False
st.expandtabs()		把字符串中的 tab 符号('\t')转为空格，tab 符号('\t')默认的空格数是 8
st.find()			检测字符串中是否包含子字符串 str,如果包含子字符串返回开始的索引值，否则返回-1
st.isalnum()		检测字符串是否由字母和数字组成
st.isapha()			检测字符串是否只由字母组成
st.isdecimal()		检查字符串是否只包含十进制字符。这种方法只存在于unicode对象
st.isdigit()		检测字符串是否只由数字组成
st.isidentifier()	判断字符串是否是有效的 Python 标识符，可用来判断变量名是否合法
st.islower()		检测字符串是否由小写字母组成
st.isnumeric()		检测字符串是否只由数字组成
st.isprintable()	判断字符串中所有字符是否都是可打印字符(in repr())或字符串为空
st.isspace()		检测字符串是否只由空格组成
st.istitle()		检测字符串中所有的单词拼写首字母是否为大写，且其他字母为小写
st.isupper()		检测字符串中所有的字母是否都为大写
st.join()			用于将序列中的元素以指定的字符连接生成一个新的字符串
st.ljust()			返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串
st.lower()			转换字符串中所有大写字符为小写
st.lstrip()			用于截掉字符串左边的空格或指定字符
st.maketrans()		用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标
st.partition()		用来根据指定的分隔符将字符串进行分割
st.replace()		把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次
st.rfind()			返回字符串最后一次出现的位置(从右向左查询)，如果没有匹配项则返回-1
st.rindex()			返回子字符串 str 在字符串中最后出现的位置，如果没有匹配的字符串会报异常
st.rjust()			返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。如果指定的长度小于字符串的长度则返回原字符串
st.rpartition()		方法类似于 partition() 方法，只是该方法是从目标字符串的末尾也就是右边开始搜索分割符
st.rsplit()			从右向左寻找，以某个元素为中心将左右分割成两个元素并放入列表中
st.split()			通过指定分隔符对字符串进行切片，如果参数 num 有指定值，则分隔 num+1 个子字符串
st.splitlines()		按照行('\r', '\r\n', \n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符
st.strip()			用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列,注意：该方法只能删除开头或是结尾的字符，不能删除中间部分的字符
st.swapcase()		用于对字符串的大小写字母进行转换
st.title()			方法返回"标题化"的字符串,就是说所有单词都是以大写开始，其余字母均为小写
st.translate()		根据参数table给出的表(包含 256 个字符)转换字符串的字符, 要过滤掉的字符放到 del 参数中
st.upper()			将字符串中的小写字母转为大写字母
st.zfill()			方法返回指定长度的字符串，原字符串右对齐，前面填充0	


4. 使用选择排序算法实现排序[3, 5, 1, 7, 9, 6, 8]

算法:
对于一组关键字{K1,K2,…,Kn}， 首先从K1,K2,…,Kn中选择最小值，假如它是 Kz，则将Kz与 K1对换；
然后从K2，K3，… ，Kn中选择最小值 Kz，再将Kz与K2对换。
如此进行选择和调换n-2趟，第(n-1)趟，从Kn-1、Kn中选择最小值 Kz将Kz与Kn-1对换，最后剩下的就是该序列中的最大值，一个由小到大的有序序列就这样形成。

a = [3, 5, 1, 7, 9, 6, 8]
print(a)
min_index = 0
for i in range(0,len(a)-1):
    min_index =i
    for j in range(i+1,len(a)):
        if a[min_index] > a[j]:
            min_index = j
   # print(a[min_index])
    a[i],a[min_index] = a[min_index],a[i]
print(a)

5、有如下一个字符串变量logs，请统计出每种请求类型的数量（提示：空格分割的第2列是请求类型），得到如下输出：
POST 2
GET 3

logs = '''
111.30.144.7 "POST /mock/login/?t=GET HTTP/1.1" 200 
111.30.144.7 "Get /mock/users/?t=POST HTTP/1.1" 200 
111.13.100.92 "Post /mock/login/ HTTP/1.1" 200 
223.88.60.88 "GET /mock/users/?t=POST HTTP/1.1" 200 
111.30.144.7 "GET /mock/users/ HTTP/1.1" 200 
'''
post_counts = logs.count('\"P')
get_counts = logs.count('\"G')
print('POST:',post_counts)
print('GET:',get_counts)









