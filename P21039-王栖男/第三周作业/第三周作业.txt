1. 说明列表的浅拷贝和深拷贝的区别
浅拷贝仅仅对对象自身创建了一份拷贝，而没有在进一步处理对象中包含的值。
深拷贝不仅仅拷贝了原始对象自身，也对其包含的值进行拷贝，它会递归的查找对象中包含的其他对象的引用，来完成更深层次拷贝。因此，深拷贝产生的副本可以随意修改而不需要担心会引起原始值的改变。

2. 说明列表和元组的相同点和不同点
列表和元组的相同点都是序列类型；列表与元组都是序列类型的容器对象，可以存放任何类型的数据、支持切片、迭代等操作。
不同点是元组用的是小括号，列表用的是方括号，最重要的一点是元组是不可变类型，大小固定，而列表是可变类型、数据可以动态变化，这种差异使得两者提供的方法、应用场景、性能上都有很大的区别。

3. 请写出字符串支持的所有方法及说明（例如: lower 返回字符串的小写）
lower 返回字符串的小写
upper返回字符串的大写
title返回字符串中所有单词首字母大写且其他字母小写的格式
capitalize返回首字母大写、其他字母全部小写的新字符串
swapcase对范围内的字符串做大小写转换（大写变小写，小写变大写）
center将字符串居中，左右两边使用fillchar进行填充，使得整个字符串的长度为width
zfill用0填充在字符串的左边使其长度为width。如果S前右正负号+/-，则0填充在这两个符号的后面，且符号也算入长度。
ljust字符串左对齐
rjust字符串右对齐
strip 默认去除空白符
lstrip 默认去除左边的空白符
rstrip 默认去吃右边的空白符
startswith 在指定的区间【start，end），字符串是否是prefix开头
endswith 在指定的区间【start，end），字符串是否是suffix结尾
count在指定的区间【start，end），从左至右，统计子串sub出现的次数
replace字符串中找到匹配替换为新子串，返回新字符串
find 在指定的区间【start，end），从左至右，查找子串sub。找到返回索引，没找到返回-1
rfind在指定的区间【start，end），从右至左，查找子串sub。找到返回索引，没找到返回-1
index在指定的区间【start，end），从左至右，查找子串sub。找到返回索引，没找到抛出异常ValueError
rindex在指定的区间【start，end），从左至右，查找子串sub。找到返回索引，没找到抛出异常ValueError
isalnum是否是字母和数字组成
isalpha是否是字母
isdecimal是够只包含十进制数字
isdigit是否全部数字（0~9）
isidentifier是不是字母和下划线开头，其他都是字母、数字、下划线
islower是否都是小写
isupper是否全部大写
isspace是否只包含空白字符
join将可迭代对象连接起来，使用string作为分隔符
+将两个字符串连接在一起，返回 一个新字符串
split将字符串按照分隔符分割成若干字符串，并返回列表
partition将字符串按照分隔符分割成2段，返回这2段和分隔符的元组
4. 使用选择排序算法实现排序[3, 5, 1, 7, 9, 6, 8]
5. 有如下一个字符串变量logs，请统计出每种请求类型的数量（提示：空格分割的第2列是请求类型），得到如下输出：
POST 2
GET 3
下边是logs变量：
logs = '''
111.30.144.7 "POST /mock/login/?t=GET HTTP/1.1" 200 
111.30.144.7 "Get /mock/users/?t=POST HTTP/1.1" 200 
111.13.100.92 "Post /mock/login/ HTTP/1.1" 200 
223.88.60.88 "GET /mock/users/?t=POST HTTP/1.1" 200 
111.30.144.7 "GET /mock/users/ HTTP/1.1" 200 
''' 