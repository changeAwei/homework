1. 说明列表的浅拷贝和深拷贝的区别
浅拷贝：也叫影子拷贝，在遇到引用类型时，只是复制了一个引用，源数据修改，拷贝获取的数据也会变
深拷贝：索引及里面的数据都会拷贝，源数据修改，不影响拷贝获取的数据

2. 说明列表和元组的相同点和不同点
相同点：都是有序的集合；访问方法相同
不同点：列表可变，元组不可变；元组没有增、删、改方法

3. 请写出字符串支持的所有方法及说明（例如: lower 返回字符串的小写
s.split(sep=None,maxsplit=-1)    #从左至右分割字符串
s.rsplit(sep=None,maxsplit=-1)   #从右至左分割字符串
s.splitlines([keepends])         #按照行来切分字符串
s.partition(sep)				         #从左至右把字符串分割成两部分，返回头、分隔符、尾三部分的三元组；如果没有找到分隔符，就返回头、2个空元素的三元组
s.rpartiton(sep)			           #与partition相反
s.upper()					               #返回字符串的大写
s.lower()						             #返回字符串的小写
s.swapcase()					           #反转字符串大小写
s.title()						             #标题的每个单词都大写
s.capitalize()					         #首个单词大写
s.center(width[,fillchar])		   #width打印宽度，fillchar填充的字符
s.zfill(width)					         #width,打印宽度，居右，左边用0填充
s.ljust(width[,fillchar])		     #左对齐
s.rjust(width[,fillchar])		     #右对齐
#字符串修改
s.replace(old,new[,count])		   #字符串中找到匹配替换为新字符串，返回新字符串,count表示替换几次，不指定就是全部替换
s.strip([chars])				         #从字符串两端去除指定的字符集chars中的所有字符
s.lstrip([chars])				         #左端去除
s.rstrip([chars])				         #右端去除
#字符串查找,找到返回索引，没找到返回-1
s.find(sub[,start[,end]])		     #在指定的区间[start,end]从左至右查找子串sub
s.rfind(sub[,start[,end]])		   #在指定的区间[start,end]从右至左查找子串sub
s.index(sub[,start[,end]])		   #在指定的区间[start,end],从左至右，查找子串sub
s.rindex(sub[,start[,end]])		   #在指定的区间[start,end],从右至左，查找子串sub

s.index()						             #按索引查找字符串
s.count('str')					         #返回字符串出现的次数
#index和count方法都是O(n)
s.len(string)					           #返回字符串长度
#字符串判断
s.endswitch(suffix[,start[,end]])        #在指定的区间[start,end]字符串是否是suffix结尾
s.startswitch(prefix[,start[,end]])      #在指定的区间[start,end]字符串是否是prefix开头

s.islnum()						           #是否是字母和数字组成
s.isalpha()						           #是否是字母
s.isdecimal()					           #是否只包含十进制数字
s.isdigit()						           #是否全部是数字
s.isidentifier()				         #是不是字母和下划线开头，其他都是字母、数字、下划线
s.islower()						           #是否都是小写
s.isupper()						           #是否都是大写
s.isspace()						           #是否只包含空字符串
#字符串格式化
print('{} {} {:<2}'.format(1,2,3))		   #{}表示占位符,<左对齐，>右对齐，'2'表示占几个字符

4. 使用选择排序算法实现排序[3, 5, 1, 7, 9, 6, 8]
#冒泡法
nums = [1,2,3,6,7,9,4,5,8,10,13,15,12,11]
length = len(nums)

for i in range(length):
    for j in range(length-1-i):
        if nums[j] > nums[j+1]:
            nums[j],nums[j+1] = nums[j+1],nums[j]          
print(nums)

5. 有如下一个字符串变量logs，请统计出每种请求类型的数量（提示：空格分割的第2列是请求类型），得到如下输出：
POST 2
GET 3

logs = '''
111.30.144.7 "POST /mock/login/?t=GET HTTP/1.1" 200 
111.30.144.7 "Get /mock/users/?t=POST HTTP/1.1" 200 
111.13.100.92 "Post /mock/login/ HTTP/1.1" 200 
223.88.60.88 "GET /mock/users/?t=POST HTTP/1.1" 200 
111.30.144.7 "GET /mock/users/ HTTP/1.1" 200 
''' 
post_count=logs.lower().count('"post')
get_count=logs.lower().count('"get')
print(post_count)
print(get_count)
