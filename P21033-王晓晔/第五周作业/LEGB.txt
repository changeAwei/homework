变量的可见范围称为命名空间，一个变量名可以定义在多个不同的命名空间，相互之间并不冲突，
但同一个命名空间中不能有两个相同的变量名，所有的命名空间都是有生命周期的。
一个变量的有效范围叫做该变量的作用域。
Python的作用域是静态作用域，因为它是由代码中得位置决定的，而命名空间就是作用域的动态表现。
由于多个命名空间可以独立存在，而且可以在不同的层次上包含相同的变量名。
作用域定义了Python在哪一个层次上查找某个变量名对应的对象。
接下来的问题就是：当Python在查找‘名称-对象’映射时，是按照什么顺序对命名空间的不同层次进行查找的？
这个顺序就是LEGB规则。
LEGB表示的是Local -> Enclosing -> Global -> Build-in，其中的箭头方向表示的是搜索顺序。
Local 本地作用域，可能是在一个函数或者类方法内部。
Enclosing 嵌套函数的外部函数的命名空间。 
Global 全局作用域，代表的是执行脚本自身的最高层次。
Build-in 内置模块的命名空间，是Python为自身保留的特殊名称。
因此，如果某个name:object映射在局部(local)命名空间中没有找到，接下来就会在闭包作用域(enclosing)进行搜索，
如果闭包作用域也没有找到，Python就会到全局(global)命名空间中进行查找，
最后会在内建(build-in)命名空间搜索。
如果一个名称在所有命名空间中都没有找到，就会产生一个NameError。
