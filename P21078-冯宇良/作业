1. 简要说明Python垃圾回收机制
1.1 引用对象为0时
1.2 赋值给其他变量，使引用增加
1.3 函数不在运行，局部变量被销毁。变量赋给新对象（赋值重新定义）

2. 什么是斐波那契数列、素数、质数和猴子吃桃问题（文字说明即可）？
2.1 斐波那契数列：第0项和第1项分别为0和1，从第二项开始，值为前两项的值相加的和
2.2 质数别名叫素数，只能被自己本身和1整除
2.2 猴子吃桃：第二天还有的数量实际是第一天吃剩下的,第一天数量的一半减去一就是第二天的数量

3. 请写出列表支持的所有方法及说明（例如: append 向列表末尾添加元素）
假定列表为lst
lst.append():直接尾部追加
lst.insert():遍历之后,根据索引上下界限，小于上界，头部追加。大于下界，尾部追加（On）
lst.count():遍历之后，返回匹配次数（On）
lst.index():根据提供区间进行遍历，遍历之后返回相应的值（On）
lst.extend():直接尾部追加可迭代对象
lst.remove():直接删除第一个对应的值
lst.pop():直接弹出第一个值，有索引遍历后 根据索引号弹出 有索引（On）
lst.clear():清空所有
lst.reverse():列表反转
lst.copy():浅拷贝（内存地址等均一样，相当于快捷方式）
lst.sort():按需排列

4. 实现一个简易的计算器，效果如下：
    （1）. 运行后提示让用户输入一个数字
    （2）. 提示输入操作符（+ - * /）
    （3）. 再次提示输入一个数字
    （4）. 打印计算结果
    （5）. 在不退出程序的前提下，可以允许用户继续输入新一组数据计
    
    while True:
    a = int(input(''))
    b = input('请输入运算符(+/-/*//)')
    c = int(input(''))
    if b == '+':
        print('{}+{}={}'.format(a,c,a+c))
    elif b == '-':
        print('{}-{}={}'.format(a,c,a-c))
    elif b =='*':
        print('{}*{}={}'.format(a,c,a*c))
    elif b =='/':
        if c == 0:
            print('0不能作为除数,请重新输入')
            continue
        else:
            print('{}/{}={}'.format(a,c,a/c))
    d = input('是否继续（y/n）')
    if d == 'n':
        break
