一、说明列表的浅拷贝和深拷贝的区别

##浅拷贝：
赋值：
	将一个对象的内容赋值给另一个对象（内存地址和数据内容都是相同，要是改变其中一个对象的内容，另一对象的内容也会变）
    .copy()：将一个对象内容克隆到另一个对象
                        简单类型：地址不同，内容相同（改变其中一个对象内容另一个对象不会有任何变化）
                        复杂类型：地址相同，内容相同（改变其中一个对象内容另一个对象也会一致的变化）

##深拷贝：
copy.deepcopy()：
     将一个对象内容完全克隆到另一个对象（内存地址不相同，数据内容相同，要是改变其中一个对象内容另一个对象内容是不变的）

二、说明列表和元组的相同点和不同点

                    相同点                           不同点
 
 列表:        可以用索引查询值                     表示方式[]
              可以通过值查询索引                   列表内元素是可变的
              可以通过值查询数量                   列表内元素可实现  增: .append  插 : .insert  删: .remove
              可以通过运算产生新列表       
              可以通过运算产生新元组
              在内存中是连续的地址
 元组：                                             表示方式()
                                                    元组内元素是不可变的，只读不可写


三、请写出字符串支持的所有方法及说明（例如: lower 返回字符串的小写）

    l = 'a,b,c,123'      ll = 'a\nb\nc\n123'       lll = 'www.baidu.com'    llll = '  \t\n abc \n   \t  '

''.join()      '@'.join(l)                  out:'a@,@b@,@c@,@1@2@3'     jion前面是分割符号，join后面是可迭代对象，返回是字符串
.split()       l.split(',',maxsplit=-1)     out:['a','b','c','123']     split前面是对象，后面是分割符号以及分割次数，从左往右切，返回是列表
.rsplit()      l.rsplit(',',1)              out:['a,b,c','123']         rsplit前面是对象，后面是分割符号以及分割次数，从右往左切，返回是列表
.splitlines()  ll.splitline()               out:['a','b','c','123']     splitline前面是对象，后面是缺省值，（True or False）按照换行符进行分割成一个新的列表
.partition     l.partition(',')             out:('1', ',', '2,3,4')     partition前面是对象，后面是分割符，将通过从左到右分割符分成左右2个部分的元组，返回是元组
.rpartition    l.rpartition(',')            out:('1,2,3', ',', '4')     partition前面是对象，后面是分割符，将通过从右到左分割符分成左右2个部分的元组，返回是元组
s = l + ll                                  out:'a,b,c,123,a\nb\nc\n123'字符串加法产生一个新的字符串
.upper()       ll.upper()                   out:'A,B,C,123'             字符串所有字母大写
.lower()       ll.lower()                   out:'a,b,c,123'             字符串所有字母小写
.title()       lll.title()                  out:'Www.Baidu.Com'         字符串中的单词首字母大写
.capitalize()  l.capitalize                 out:'A,b,c,123'             字符串中的第一个字母大写
.center()      l.center(20,'@')             out:@@@@@'a,b,c,123'@@@@@   中间对齐，两边使用字符@填充，字符串总长度20
.zfill()       l.zfill(20)                  out:00000000000'a,b,c,123'  右对齐，左侧使用0补齐，字符串长度20
.rjust()       l.rjust(20,'@)               out:@@@@@@@@@@@'a,b,c,123'  右对齐，左侧使用@补齐，字符串长度20
.ljust()       l.ljust(20,'@)               out:'a,b,c,123'@@@@@@@@@@   左对齐，右侧使用@补齐，字符串长度20
.find()        lll.find('a',3,6)            out:5                       根据字符串内容查找字符串内的索引并返回索引值，从[3-6）
.index()       lll.index('a',3,6)           out:5                       与find类似，区别就在于find在无法发现查找内容返回-1但是index返回的是错误
.count()       lll.count('www')             out:1                       count前是对象，后括号内是需要查找引用的字符串，输出出现的次数
.startswith()  lll.startswith('w', 0, -1)   out:True                    判断字符串对象是否是以‘w'开头的从[0,-1）返回的是一个bool值
.endswith()    lll.endswith('com')          out:True                    判断字符串对象是否是以‘omn'结尾的从头到尾，返回的是一个bool值















