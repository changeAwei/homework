内置函数
1.
​abs(x)
返回一个数的绝对值。实参可以是整数或浮点数。如果实参是一个复数，返回它的模。
2.
all(iterable)
如果iterable 的所有元素为真（或迭代器为空），返回True 。 
3.
any(iterable)
如果*iterable* 的任一元素为真则返回 ‘‘True‘‘。如果迭代器为空，返回 ‘‘False‘‘。
4.
ascii(object)
就像函数repr()，返回一个对象可打印的字符串，但是repr() 返回的字符串中非ASCII 编码的字符，会使用\x、\u 和\U 来转义。生成的字符串和Python2的repr() 返回的结果相似。
5.
bin(x)
将一个整数转变为一个前缀为“0b”的二进制字符串。
6.
bool([x])
返回一个布尔值，True 或者False。x 使用标准的真值测试过程来转换。如果x 是假的或者被省略，返回False；其他情况返回True。
7.
breakpoint(*args, **kws)
此函数会在调用时将你陷入调试器中。具体来说，它调用sys.breakpointhook() ，直接传递 args和kws 。默认情况下，sys.breakpointhook() 调用pdb.set_trace() 且没有参数。在这种情况下，它纯粹是一个便利函数，因此您不必显式导入pdb 且键入尽可能少的代码即可进入调试器。但是，sys.breakpointhook() 可以设置为其他一些函数并被breakpoint() 自动调用，以允许进入你想用的调试器。
8.
class bytearray([source[, encoding[, errors]]])
返回一个新的bytes 数组。bytearray 类是一个可变序列，包含范围为0<=x<256的整数。它有可变序列大部分常见的方法。可选形参source 可以用不同的方式来初始化数组，如果是一个string，您必须提供 encoding 参数（errors 参数仍是可选的）；bytearray() 会使用str.encode() 方法来将 string 转变成 bytes，如果是一个integer，会初始化大小为该数字的数组，并使用null字节填充，如果是一个符合buffer 接口的对象，该对象的只读buffer会用来初始化字节数组，如果是一个iterable 可迭代对象，它的元素的范围必须是 0 <= x < 256 的整数，它会被用作数组的初始内容。如果没有实参，则创建大小为0的数组。
9.
class bytes([source[, encoding[, errors]]])
返回一个新的“bytes”对象，是一个不可变序列，包含范围为0 <= x < 256的整数。bytes是bytearray的不可变版本-它有其中不改变序列的方法和相同的索引、切片操作。因此，构造函数的实参和bytearray() 相同。字节对象还可以用字面值创建。
10.
callable(object)
如果实参object 是可调用的，返回True，否则返回False。如果返回真，调用仍可能会失败；但如果返回假，则调用object 肯定会失败。注意类是可调用的（调用类会返回一个新的实例）。如果实例的类有__call__() 方法，则它是可调用。
11.
chr(i)
返回Unicode 码位为整数 i 的字符的字符串格式。例如，chr(97) 返回字符串 'a'，chr(8364) 返回字符串'€'。这是ord() 的逆函数。实参的合法范围是0到1,114,111（16进制表示是0x10FFFF）。如果i超过这个范围，会触发ValueError异常。
12.
@classmethod
把一个方法封装成类方法。一个类方法把类自己作为第一个实参，就像一个实例方法把实例自己作为第一个实参。
13.
compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)
将source 编译成代码或 AST 对象。代码对象可以被exec() 或eval() 执行。source 可以是常规的字符串、字节字符串，或者AST对象。f ilename 实参需要是代码读取的文件名；如果代码不需要从文件中读取，可以传入一些可辨识的值（经常会使用'<string>'）。mode 实参指定了编译代码必须用的模式。如果source 是语句序列，可以是'exec'；如果是单一表达式，可以是'eval'；如果是单个交互式语句，可以是'single'。（在最后一种情况下，如果表达式执行结果不是None 将会被打印出来。）
，可选参数flags 和dont_inherit 控制在编译 source 时要用到哪个 future 语句。如果两者都未提供（或都为零）则会使用调用compile() 的代码中有效的 future 语句来编译代码。如果给出了 flags 参数但没有dont_inherit (或是为零) 则 flags 参数所指定的以及那些无论如何都有效的future语句会被使用。如果dont_inherit 为一个非零整数，则只使用 flags 参数 –在调用外围有效的 future 语句将被忽略。Future 语句使用比特位来指定，多个语句可以通过按位或来指定。具体特性的比特位可以通过__future__ 模块中的 _Feature 类的实例的 compiler_flag 属性来获得。optimize 实参指定编译器的优化级别；默认值 -1 选择与解释器的-O选项相同的优化级别。显式级别为0（没有优化；__debug__ 为真）、1（断言被删除，__debug__ 为假）或2（文档字符串也被删除）。如果编译的源码不合法，此函数会触发SyntaxError 异常；如果源码包含 null 字节，则会触发ValueError 异常。
14.
class complex([real[, imag]])
返回值为real + imag*1j 的复数，或将字符串或数字转换为复数。如果第一个形参是字符串，则它被解释为一个复数，并且函数调用时必须没有第二个形参。第二个形参不能是字符串。每个实参都可以是任意的数值类型（包括复数）。如果省略了imag，则默认值为零，构造函数会像int和float一样进行数值转换。如果两个实参都省略，则返回0j。注解: 当从字符串转换时，字符串在+或-的周围必须不能有空格。例如complex('1+2j')是合法的，但complex('1 + 2j') 会触发ValueError 异常。数字类型—int, float, complex 描述了复数类型。
15.
delattr(object, name)
setattr() 相关的函数。实参是一个对象和一个字符串。该字符串必须是对象的某个属性。如果对象允许，该函数将删除指定的属性。例如delattr(x, 'foobar') 等价于 del x.foobar 。
16.
class dict(**kwarg)
class dict(mapping, **kwarg)
class dict(iterable, **kwarg)
创建一个新的字典。dict对象是一个字典类。
17.
dir([object ])如果没有实参，则返回当前本地作用域中的名称列表。如果有实参，它会尝试返回该对象的有效属性列表。
如果对象有一个名为__dir__() 的方法，那么该方法将被调用，并且必须返回一个属性列表。这允许实现自定义__getattr__() 或 __getattribute__() 函数的对象能够自定义dir() 来报告它们的属性。如果对象不提供__dir__()，这个函数会尝试从对象已定义的__dict__ 属性和类型对象收集信息。结果列表并不总是完整的，如果对象有自定义__getattr__()，那结果可能不准确。默认的dir() 机制对不同类型的对象行为不同，它会试图返回最相关而不是最全的信息：• 如果对象是模块对象，则列表包含模块的属性名称。• 如果对象是类型或类对象，则列表包含它们的属性名称，并且递归查找所有基类的属性。• 否则，列表包含对象的属性名称，它的类属性名称，并且递归查找它的类的所有基类的属性。返回的列表按字母表排序。 因为dir() 主要是为了便于在交互式时使用，所以它会试图返回人们感兴趣的名字集合，而不是试图保证结果的严格性或一致性，它具体的行为也可能在不同版本之间改变。例如，当实参是一个类时，metaclass 的属性不包含在结果列表中。
18.
divmod(a, b)
它将两个（非复数）数字作为实参，并在执行整数除法时返回一对商和余数。对于混合操作数类型，适用双目算术运算符的规则。对于整数，结果和(a // b, a % b)一致。对于浮点数，结果是(q, a % b) ，q 通常是math.floor(a / b) 但可能会比 1 小。在任何情况下，q * b + a % b和a基本相等；如果a % b非零，它的符号和b一样，并且0 <= abs(a % b) < abs(b)。
19.
enumerate(iterable, start=0)
返回一个枚举对象。iterable 必须是一个序列，或iterator，或其他支持迭代的对象。
20.
enumerate()
返回的迭代器的__next__() 方法返回一个元组，里面包含一个计数值（从start 开始，默认为 0）和通过迭代iterable 获得的值。
