1. 什么是高阶函数和柯理化并举例说明。
高阶函数是接受一个或多个函数作为参数或者输出一个函数的一种函数。
def counter(base):
def inc(step=1): 
nonlocal base
base += step 
return base
return inc
柯理化是指将原来接受两个参数的函数变成新的接受一个参数的函数的过程。新的函数返回一个以原有第二个参数为参数的函数。
将减法函数柯理化
def minus(x,y):
return x-y

转换如下
def minus(x):
def _minus(y):
return x-y
return _minus
minus(6)(9)
2. 请列出functools包内的每个函数的功能作用。
@functools.reduce  将两个参数的函数累加到序列项中，从左到右，以便将序列减少为单个值。

@functools.partial  偏函数，把函数部分参数固定下来，相当于为部分参数添加了一个固定的默认值，形成一个新的函数并返回，从partial生成的新函数，是对原函数的封装。

@functools.lru_cache(maxsize=128, typed=False)   Least-recently-used装饰器。lru，最近最少使用。cache缓存。如果maxsize设置为None，则禁用LRU功能，并且缓存可以无限制增长。当maxsize是二的幂时，LRU功能执行得最好；如果typed设置为True，则不同类型的函数参数将单独缓存。例如，f(3)和f(3.0)将被视为具有不同结果的不同调用。

@functools.update_wrapper(wrapper, wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
类似copy_properties功能
wrapper 包装函数、被更新者，wrapped 被包装函数、数据源
元组WRAPPER_ASSIGNMENTS中是要被覆盖的属性
'__module__', '__name__', '__qualname__', '__doc__', '__annotations__'
  模块名、名称、限定名、文档、参数注解
元组WRAPPER_UPDATES中是要被更新的属性，__dict__属性字典
增加一个__wrapped__属性，保留着wrapped函数

@functools.wraps(wrapped, assigned=WRAPPER_ASSIGNMENTS, updated=WRAPPER_UPDATES)
类似copy_properties功能
wrapped 被包装函数
元组WRAPPER_ASSIGNMENTS中是要被覆盖的属性
'__module__', '__name__', '__qualname__', '__doc__', '__annotations__'
 模块名、名称、限定名、文档、参数注解
元组WRAPPER_UPDATES中是要被更新的属性，__dict__属性字典
增加一个__wrapped__属性，保留着wrapped函数

4. 什么是类型注解并说明其背后的目的。
Python是动态语言，变量随时可以被赋值，且能赋值为不同类型，类型注解就是对变量类型做一个辅助说明，并不对其进行类型检查。
这样做的目的是让别的程序员看的更明白，让 IDE 了解类型，从而提供更准确的代码提示、补全和语法检查。
