1. 什么是类和实例并说明他们之间的关系
类是抽象的概念，是万事万物的抽象，是一类事物的共同特征的集合，用计算机语言来描述类，就是属性和方法的集合。
实例是类的具象，是一个实体。对于我们每个人这个个体，都是抽象概念人类的不同的实体。
2. 类的实例方法、类方法和静态分别如何定义举例说明，并总结它们的应用场景
类的实例方法：本身是类的属性，第一个参数必须是self，而self必须指向一个对象，也就是类必须实例化之后，由实例来调用这个方法。
class Person:
    def __init__(self,name,age)
        self.name = name
        self.age = age
    def showage(self):
        print('{} is {}'.format(self.name,self.age))

类方法：在类定义中，使用@classmethod装饰器修饰的方法；必须至少有一个参数，且第一个参数留给了cls，cls指代调用者即类对象自身；
cls这个标识符可以使任意合法名称，但是为了易读，请不要修改；通过cls可以直接操作类的属性。
class Person:
    @classmethod
    def class_method(cls):
        print('class = {0.__name__} ({0})'.foramt(cls))

静态方法：在类定义中，使用@staticmethod装饰器修饰的方法；调用时，不会隐式的传入参数，静态方法，只是表明这个方法属于这个名词空间，
函数归在一起，方便组织管理。
class Person:
    @staticmethod
    def static_method():
        print('staticmethod')


3. MRO是什么，描述其查找顺序
方法解析顺序，解决基类搜索顺序问题。c3算法，在类被创建出来的时候，就计算出一个MRO有序列表。
2.3之后，python3唯一支持的算法，c3算法，解决了继承的单调性它阻止创建之前版本产生二义性的代码，求得的MRO本质是为了线性化，且确定了顺序。
4. Mixin是什么，描述其应用场景 
Mixin本质上就是多继承实现的。Mixin体现的是一种组合的设计模式。在面向对象的设计中，一个复杂的类，往往需要很多功能，
而这些功能共由来自不同的类提供，这就需要很多的类组合在一起。
从设计模式的角度来说，多组合，少继承。
Mixin类的使用原则，一是Mixin类中不应该显式的出现__init__方法，二是Mixin类通常不能独立工作，因为它是主内混入别的类中的部分功能实现；
三是Mixin的祖先类也应是Mixin类。
