类型注解：

python是动态语言，变量随时可以被赋值，且能赋值为不同的类型
python不是静态语言，变量类型在运行时才决定

动态语言弊端：
难发现，难使用；不做任何类型检查，只会在运行时才暴露出问题，函数的使用者看到时并不知道你的函数的设计，不知道该传入什么类型的数据

关于弊端解决的办法：
  1.增加文档，这是一个惯例，不是强制标准，需要注意的是，函数定义更新了，文档未必同步更新
  2.利用函数注解：
      在3.5以后的版本才引入使用，
      对函数的参数进行注解
      对函数的返回值进行类型注解
      支队函数参数做一个辅助的说明，并不对函数参数进行类型检查
      提供第三方工具，做代码分析，发现隐藏的bug
      函数注解的信息，保存在__annotations__
      调用类方法：     函数.__annotations__
      变量注解在3.6后引入：      i: int = 3