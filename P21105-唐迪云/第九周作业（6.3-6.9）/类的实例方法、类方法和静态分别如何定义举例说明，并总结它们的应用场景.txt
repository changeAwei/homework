实例方法只能被实例对象调用，静态方法(由@staticmethod装饰的方法)、类方法(由@classmethod装饰的方法)，可以被类或类的实例对象调用。

实例方法：没有@classmethod和@staticmethod标记的方法是实例方法。假设这个            有n个比传参数，类型调用的时候需要给n个参数传参。而实例调用时则           只能传n-1个参数，因为第一个参数被系统默认传递了实例本身；因为            有这个规定，所以实例方法如果没有参数，则实例是无法调用的，但类           型可以调用.

          第一个参数必须要默认传实例对象，一般习惯用self。

class Person:
    def __init__(self, name, age):
        self.name = name
        self._age = age
    def showage(self):
        print('{} is {}'.format(self.name, self.age))

类方法：也叫类型方法，用@classmethod做标记的方法.假设其有n个必传参数，如         果是类调用，则需要传n-1个参数，第一个参数同样是内定的类型本身。          如果是实例调用，则需要传n个参数。类方法要让类型能调用，当然也需          要至少一个参数.

        第一个参数必须要默认传类，一般习惯用cls。

1. 在类定义中，使用@classmethod装饰器修饰的方法
2. 必须至少有一个参数，且第一个参数留给了cls，cls指代调用者即类对象自身
3. cls这个标识符可以是任意合法名称，但是为了易读，请不要修改

class Person:
    @classmethod
    def class_method(cls):
        print('class = {0.__name__} ({0})'.foramt(cls))

静态方法：@staticmethod标记的方法。类和实例都可以调用。无内定的参数问题            ，方法有多少参数就必须传递多少参数。

          对参数没有要求

1. 在类定义中，使用@staticmethod装饰器修饰的方法
2. 调用时，不会隐式的传入参数
静态方法，只是表明这个方法属于这个名词空间。函数归在一起，方便组织管理

class Person:
    @staticmethod
    def static_method():
        print('staticmethod')


使用场景总结：

1.如果需要访问或者修改某个实例的成员变量时，将该方法定义成实例方法。类方法正好相反，它不需要访问或者修改某个实例的成员变量。



2.类方法一般用于实现一些工具方法，比如对某个对象进行扩展，或者实现单例



3.实际如果一个方法与他所在类型的实例无关，那么它就应该是静态的，决不会有人把它写成实例方法。所以所有的实例方法都与实例有关，既然与实例有关，那么创建实例就是必然的步骤，没有麻烦简单一说。实际上上你可以把所有的实例方法都写成静态的，将实例作为参数传入即可。
