1、说明列表的浅拷贝和深拷贝的区别
浅拷贝又称影子拷贝，可使用list.copy()方法或者导入copy模块，使用copy.copy(x) 其返回一个相同的列表，与原列表指向同一内存地址。
如列表中有复杂类型，如列表、集合等，修改复制出来的列表中复杂类型的元素，其原列表中元素也会被修改。
深拷贝需导入copy模块，使用copy.deepcopy(x)方法，返回一个与原列表相同，但内存地址完全不同的列表。

2、 说明列表和元组的相同点和不同点
相同点：列表和元祖都是属于有序序列，都属于可迭代对象，都可以通过索引进行查找元素。都拥有相同的查询方法，比如count(x)、index(x)
不同点：列表是可变的，元祖是不可变的，列表是使用'[]'，元祖使用'()'。列表可通过索引修改元素，列表拥有新增、删除等方法。元祖则没有。

3、请写出字符串支持的所有方法及说明
”string“.join(iterable) -> 将可迭代对象中的元素一个一个通过指定字符串进行拼接，形成一个新的字符串
str.split(seq，maxsplit = -1)   可以指定分隔符，切割多少刀，-1表示能切多少切多少刀。
str.partion(seq) 指定分隔符，得到三个元素的元祖
str.upper() -> 将字符串变为全大写
str.lower() -> 将字符串变为全小写
swapcase() 交互式大小写，即用户输入小写，输出为大写，用户输入大写，输出为小写
title()      标题的每个单词都大写
capitalize()  首个单词大写
center(width[,dillchar])   width 打印宽度，fillchar 填充的字符
zfill(width) -> str  width 打印宽度，居右，左边用0填充。
ljust(width[,fillchal]) -> 左对齐
rjust(width[,fillchal]) -> 右对齐
replace(old,new[,count]):匹配到old的字符串替换为new。count不指定，表示全部替换。
strip([char]) ->两端去除指定的字符串
find(sub[,start[,stop]]) ->int  指定区间查找第一个出现的字符串，找到返回索引，没找到返回’-1‘
count(sub[,start[,stop]]) ->int 统计子串出现的次数。
endwith(char[,start[,end]]) -> bool  指定区间字符是否已char结尾
startwith(char[,start[,end]]) -> bool  指定区间字符是否已char开头
isalnum()  是否是字母和数字组成
isalppha()  是否是字母
isdecimal() 是否只包含十进制数字
isdigit() 是否全部为数字
isidentifier() 是不是字母下划线开头，其他都是字母数字下划线
islower() 是否都是小写
isupper() 是否都是大写
isspace() 是否只包含空白字符串