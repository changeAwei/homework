1. 说明列表的浅拷贝和深拷贝的区别
	列表的浅拷贝：
		对于简单变量(int,float,bool等)，是拷贝了其值，对于复杂对象，拷贝的是其在内存的地址，使用的方法是list.copy()方法，
		例如：
			lst1 = [1,2,3,4]
			lst2 = [1,2,lst1]
			lst3 = lst2.copy()
			lst1[3] =100
			那么lst3中的值也会跟着改变
			
	列表的深拷贝：
		列表的深拷贝其实可以理解成仿照一个列表的内容，进行拷贝，拷贝出来的列表和之前的列表没有任何关系
		列表的深拷贝使用copy模块实现
		import copy
		lst1 = [1,2,3,4]
		lst2 = [1,2,lst1]
		lst3 = copy.deepcopy(lst2)
		
2. 说明列表和元组的相同点和不同点
	相同点：
		都是序列对象
		可以说元组是特殊的列表，只不过元组一旦初始化了，就不能改变了
	不同点：
		列表是可变的序列，列表使用[]
		元组是不可变的序列,元组使用()注意，当元组只有一个元素时，一定要加一个逗号，例如：(1,)
		In [41]: lst1                                                                            
		Out[41]: [1, 2, 3, 4]
		In [42]: t = (lst1)                                                                      
		In [43]: t                                                                               
		Out[43]: [1, 2, 3, 4]
		In [44]: type(t)                                                                         
		Out[44]: list
		In [45]: t = (lst1,)                                                                     
		In [46]: type(t)                                                                         
		Out[46]: tuple
	还有一个问题，元组真的不可变吗？
	In [47]: temp = (1,2,3)                                                                  
	In [48]: id(temp)                                                                        
	Out[48]: 140523079686760
	#使用切片的方式产生一个新的元组
	In [49]: temp = temp[:2] + (2,) + temp[2:]                                               
	In [50]: temp                                                                            
	Out[50]: (1, 2, 2, 3)
	In [51]: id(temp)                                                                        
	Out[51]: 140523078972584
	#所以元组是真的不可变的。
	
3. 请写出字符串支持的所有方法及说明（例如: lower 返回字符串的小写）
	答案见《about string.txt》
4. 使用选择排序算法实现排序[3, 5, 1, 7, 9, 6, 8]
	答案见《selectSort.py》

5. 有如下一个字符串变量logs，请统计出每种请求类型的数量（提示：空格分割的第2列是请求类型），得到如下输出：
POST 2
GET 3
下边是logs变量：
logs = '''
111.30.144.7 "POST /mock/login/?t=GET HTTP/1.1" 200 
111.30.144.7 "Get /mock/users/?t=POST HTTP/1.1" 200 
111.13.100.92 "Post /mock/login/ HTTP/1.1" 200 
223.88.60.88 "GET /mock/users/?t=POST HTTP/1.1" 200 
111.30.144.7 "GET /mock/users/ HTTP/1.1" 200 
'''
	答案见《handle_string.py》
